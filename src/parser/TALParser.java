/* Generated By:JavaCC: Do not edit this line. TALParser.java */
package parser;

import parser.syntaxtree.*;
import java.util.Vector;


public class TALParser implements TALParserConstants {

  static final public one_line one_line() throws ParseException {
   fof n0;
   NodeToken n1;
   Token n2;
    n0 = fof();
    n2 = jj_consume_token(0);
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
     {if (true) return new one_line(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public fof fof() throws ParseException {
   implication n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   implication n5;
    n0 = implication();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUIV:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(EQUIV);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = implication();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new fof(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public implication implication() throws ParseException {
   disjunction n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   disjunction n5;
    n0 = disjunction();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLIC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(IMPLIC);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = disjunction();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new implication(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public disjunction disjunction() throws ParseException {
   conjunction n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   conjunction n5;
    n0 = conjunction();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(OR);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = conjunction();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new disjunction(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public conjunction conjunction() throws ParseException {
   unary n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   unary n5;
    n0 = unary();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(AND);
                 n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = unary();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new conjunction(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public unary unary() throws ParseException {
   NodeChoice n0;
   literal n1;
   quantification n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case LBRACK:
    case NOT:
    case IDENT:
    case VAR:
      n1 = literal();
        n0 = new NodeChoice(n1, 0);
      break;
    case EXISTS:
    case FORALL:
      n2 = quantification();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new unary(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public quantification quantification() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   unary n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXISTS:
      n2 = jj_consume_token(EXISTS);
                       n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case FORALL:
      n4 = jj_consume_token(FORALL);
                       n3 = JTBToolkit.makeNodeToken(n4);
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(VAR);
              n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(COLON);
                n7 = JTBToolkit.makeNodeToken(n8);
    n9 = unary();
     {if (true) return new quantification(n0,n5,n7,n9);}
    throw new Error("Missing return statement in function");
  }

  static final public literal literal() throws ParseException {
   NodeChoice n0;
   atom n1;
   negation n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
    case LBRACK:
    case IDENT:
    case VAR:
      n1 = atom();
        n0 = new NodeChoice(n1, 0);
      break;
    case NOT:
      n2 = negation();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new literal(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public negation negation() throws ParseException {
   NodeToken n0;
   Token n1;
   unary n2;
    n1 = jj_consume_token(NOT);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = unary();
     {if (true) return new negation(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public atom atom() throws ParseException {
   NodeChoice n0;
   terminal n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   fof n5;
   NodeToken n6;
   Token n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   fof n11;
   NodeToken n12;
   Token n13;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
    case VAR:
      n1 = terminal();
        n0 = new NodeChoice(n1, 0);
      break;
    case LPAR:
        n2 = new NodeSequence(3);
      n4 = jj_consume_token(LPAR);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = fof();
        n2.addNode(n5);
      n7 = jj_consume_token(RPAR);
                  n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n0 = new NodeChoice(n2, 1);
      break;
    case LBRACK:
        n8 = new NodeSequence(3);
      n10 = jj_consume_token(LBRACK);
                     n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n11 = fof();
        n8.addNode(n11);
      n13 = jj_consume_token(RBRACK);
                     n12 = JTBToolkit.makeNodeToken(n13);
        n8.addNode(n12);
        n0 = new NodeChoice(n8, 2);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new atom(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public terminal terminal() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   predicate n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      n2 = jj_consume_token(VAR);
                 n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case IDENT:
      n3 = predicate();
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new terminal(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public predicate predicate() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   argblock n3;
    n1 = jj_consume_token(IDENT);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAR:
      n3 = argblock();
        n2.addNode(n3);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
     {if (true) return new predicate(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  static final public argblock argblock() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   args n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LPAR);
               n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
    case VAR:
    case NUM:
      n3 = args();
        n2.addNode(n3);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    n5 = jj_consume_token(RPAR);
               n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new argblock(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  static final public args args() throws ParseException {
   arg n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   arg n5;
    n0 = arg();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = arg();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new args(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  static final public arg arg() throws ParseException {
   NodeChoice n0;
   predicate n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    if (jj_2_1(2147483647)) {
      n1 = predicate();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        n3 = jj_consume_token(IDENT);
                   n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1);
        break;
      case VAR:
        n5 = jj_consume_token(VAR);
                 n4 = JTBToolkit.makeNodeToken(n5);
        n0 = new NodeChoice(n4, 2);
        break;
      case NUM:
        n7 = jj_consume_token(NUM);
                 n6 = JTBToolkit.makeNodeToken(n7);
        n0 = new NodeChoice(n6, 3);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new arg(n0);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public TALParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x20000,0x1000,0x2000,0x19c420,0x18000,0x184420,0x180420,0x180000,0x20,0x380000,0x80,0x380000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public TALParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TALParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TALParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public TALParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TALParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public TALParser(TALParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(TALParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}
