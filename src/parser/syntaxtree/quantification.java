//
// Generated by JTB 1.3.2
//

package parser.syntaxtree;

/**
 * Grammar production:
 * f0 -> ( <EXISTS> | <FORALL> )
 * f1 -> <VAR>
 * f2 -> <COLON>
 * f3 -> unary()
 */
public class quantification implements Node {
   public NodeChoice f0;
   public NodeToken f1;
   public NodeToken f2;
   public unary f3;

   public quantification(NodeChoice n0, NodeToken n1, NodeToken n2, unary n3) {
      f0 = n0;
      f1 = n1;
      f2 = n2;
      f3 = n3;
   }

   public quantification(NodeChoice n0, NodeToken n1, unary n2) {
      f0 = n0;
      f1 = n1;
      f2 = new NodeToken(":");
      f3 = n2;
   }

   public void accept(parser.visitor.Visitor v) {
      v.visit(this);
   }
   public <R,A> R accept(parser.visitor.GJVisitor<R,A> v, A argu) {
      return v.visit(this,argu);
   }
   public <R> R accept(parser.visitor.GJNoArguVisitor<R> v) {
      return v.visit(this);
   }
   public <A> void accept(parser.visitor.GJVoidVisitor<A> v, A argu) {
      v.visit(this,argu);
   }
}

